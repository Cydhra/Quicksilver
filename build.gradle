import org.apache.tools.ant.taskdefs.condition.Os

buildscript {
    ext {
        kotlinx_serialization_version = '0.20.0'
        kotlin_version = '1.3.70'

        log4j_version = '2.13.0'
        ktor_version = '1.3.2'
        jsoup_version = '1.12.2'
        junit_version = '5.2.0'
    }

    repositories {
        jcenter()
    }

    dependencies {
        classpath group: 'org.jetbrains.kotlin', name: 'kotlin-gradle-plugin', version: kotlin_version
        classpath group: 'org.jetbrains.kotlin', name: 'kotlin-serialization', version: kotlin_version
        classpath group: 'com.github.jengelman.gradle.plugins', name: 'shadow', version: '6.0.0'
    }
}

group 'net.cydhra'
version '1.0-SNAPSHOT'

apply plugin: 'kotlin'
apply plugin: 'kotlinx-serialization'
apply plugin: 'application'
apply plugin: 'com.github.johnrengelman.shadow'

mainClassName = 'io.ktor.server.netty.EngineMain'

repositories {
    jcenter()
    maven { url 'https://jitpack.io' }
    flatDir { dirs 'lib' }
}

def ultralightOsIdentifier = {
    def bitName = (System.getProperty("os.arch", "?").contains("64") ||
            System.getProperty("sun.arch.data.model", "?").contains("64")) ? "64" : "32"

    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        return "win" + bitName
    } else if (Os.isFamily(Os.FAMILY_UNIX)) {
        return "linux" + bitName
    } else {
        throw new UnsupportedOperationException("This OS is not supported")
    }
}

def lwjglClassifier = {
    if(Os.isFamily(Os.FAMILY_WINDOWS)) {
        return "natives-windows"
    } else if(Os.isFamily(Os.FAMILY_MAC)) {
        return "natives-macos"
    } else if(Os.isFamily(Os.FAMILY_UNIX)) {
        return "natives-linux"
    } else {
        throw new UnsupportedOperationException("This OS is not supported")
    }
}

configurations {
    natives
    compile.extendsFrom(natives)
}

dependencies {
    implementation group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib-jdk8'
    implementation group: 'org.jetbrains.kotlinx', name: 'kotlinx-serialization-runtime', version: kotlinx_serialization_version

    // server
    implementation group: 'io.ktor', name: 'ktor-server-core', version: ktor_version
    implementation group: 'io.ktor', name: 'ktor-server-netty', version: ktor_version
    implementation group: 'io.ktor', name: 'ktor-serialization', version: ktor_version
    implementation group: 'io.ktor', name: 'ktor-websockets', version: ktor_version

    // logging
    implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: log4j_version
    implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: log4j_version
    implementation group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: log4j_version

    // ui
    implementation group: 'com.labymedia', name: 'ultralight-java-base', version: '0.3.5'
    implementation group: 'com.labymedia', name: 'ultralight-java-databind', version: '0.3.5'
    natives group: 'ht.ultralig', name: 'ultralight-sdk', version: '1.2.1', classifier: ultralightOsIdentifier()

    implementation group: 'org.lwjgl', name: 'lwjgl', version: '3.2.2'
    runtimeOnly group: 'org.lwjgl', name: 'lwjgl', version: '3.2.2', classifier: lwjglClassifier()

    implementation group: 'org.lwjgl', name: 'lwjgl-opengl', version: '3.2.2'
    runtimeOnly group: 'org.lwjgl', name: 'lwjgl-opengl', version: '3.2.2', classifier: lwjglClassifier()

    implementation group: 'org.lwjgl', name: 'lwjgl-glfw', version: '3.2.2'
    runtimeOnly group: 'org.lwjgl', name: 'lwjgl-glfw', version: '3.2.2', classifier: lwjglClassifier()

    // system
    implementation group: 'com.github.Cydhra', name: 'jPowerShell', version: 'master'

    // utility
    implementation group: 'com.google.guava', name: 'guava', version: '29.0-jre'

    // testing
    testCompile group: 'org.assertj', name: 'assertj-core', version: '3.11.1'
    testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: junit_version
    testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: junit_version
    testRuntime group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: junit_version
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}

// Extract the native libraries that it needs at runtime into a directory that is then made available using JVM
// arguments
task extractNatives(type: Copy) {
    configurations.natives.each { file ->
        from(zipTree(file)) {
            if (ultralightOsIdentifier().startsWith("linux")) {
                include "*.so"
            }
            else if (ultralightOsIdentifier().startsWith("win")) {
                include "*.dll"
            }
            else {
                include "*.dylib"
            }
        }
        into 'lib/native'
    }
}

application {
    mainClassName = 'net.cydhra.quicksilver.server.QuickSilverServerKt'
}

run {
    // ensure that natives are present
    dependsOn extractNatives

    workingDir file("$projectDir/run")
    jvmArgs = [
            '-Djava.library.path=../lib/native',
    ]
}